package example.testtask.java8.oop;

/**
 * Created by alexandr on 22.01.16.
 */
public class Main3 {

    public static void main(String[] args) {
        /**
         * 0.1 Модификатор доступа 'default' - ограничивает область видимости в пределах пакета для объекта и класса-наследника
         * 0.2 Модификатор доступа 'private' - ограничивает область видимости в пределах класса (это значит что в класс-наследник эта функция непопадает)
         * 0.3 Разрешается расширять модификатор доступа (с 'protected' на 'public' ИЛИ с 'default' на 'public') НО запрещается сужать модификатор доступа (с 'public' на 'protected') - это ошибка компиляции...
         * 1. Первым шагом будем создание объекта версии реализации (типа) 'Chield3'
         *    - есть одинаковые функции, поэтому реализация для этих функций во всех родительских-классах должна перекрываться от последнего класса-наследника (независимо от ограничения тип интерфейса, потому-что это ограничение действует только для разных функций...)
         * 2.1 Тип интерфейса ограничивает версию реализации НО поскольку функции одинаковые и они перекрываются...то ограничение в этом случае НЕработает
         * 2.2 Модификаторы доступа тоже ограничивают область видимости для функций
         *     - только модификаторы: 'default' и 'protected' разрешают доступ для классов-наследников - поэтому вызов 'p.test2' будет запрещен (потому-что функция непопадает в класс-наследник и для этой функции НЕработает правило перекрытия одинаковых функций...)
         *     - запрещается сужать модификатор доступа (с 'public' на 'protected') - поэтому вызов 'p.test3' будет запрещен...
         * 3. В результате доступен вызов 'p.test1' (потому-что мы в одном пакете) И применено правило перекрытия для одинаковых функций...
         *    - поэтому будет выбрана функция из класса версии реализации (Chield3 >> test1)
         */
        Parent3 p = new Chield3();
        p.test1();
//        p.test2(); // ошибка компиляции
//        p.test3();
    }

}

class Parent3 {
    void test1(){
        System.out.println("Parent test1");
    }
    private void test2(){
        System.out.println("Parent test2");
    }
    public void test3(){
        System.out.println("Parent test3");
    }
}
class Chield3 extends Parent3 {
    public void test1(){
        System.out.println("Chield3 test1");
    }
    public void test2(){
        System.out.println("Chield3 test2");
    }
//    protected void test3(){ // ошибка компиляции
//        System.out.println("Chield3 test3");
//    }
}